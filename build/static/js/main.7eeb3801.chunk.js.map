{"version":3,"sources":["containers/ProjectsPage/ProjectsPage.module.scss","assets/vojo-pic.png","assets/to-do-list-pic.jpg","assets/strange-eyes.jpg","components/CardFront/CardFront.module.scss","data/projects.js","components/CardFront/index.js","components/CardFront/CardFront.jsx","containers/ProjectsPage/index.js","containers/ProjectsPage/ProjectsPage.jsx","containers/NotFound/index.js","containers/NotFound/NotFound.jsx","containers/Routes/index.js","containers/Routes/Routes.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Project","projectTitle","projectImage","projectLiveLink","projectRepoLink","projectStrapline","projectDescription","this","projectArray","VojoPic","ToDoListPic","SheaFacePic","CardFront","project","className","styles","cardFront","src","alt","href","ProjectsPage","projectsPage","projectsBox","projects","map","NotFound","Routes","noThrow","from","to","path","default","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,aAAe,mCAAmC,YAAc,oC,sBCDlFD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCC3CD,EAAOC,QAAU,CAAC,UAAY,+B,+RCIxBC,EACF,WAAYC,EAAcC,EAAcC,EAAiBC,EAAiBC,EAAkBC,GAAqB,oBACjHC,KAAKN,aAAeA,EACpBM,KAAKL,aAAeA,EACpBK,KAAKJ,gBAAkBA,EACvBI,KAAKH,gBAAkBA,EACvBG,KAAKF,iBAAmBA,EACxBE,KAAKD,mBAAqBA,GA4DfE,EAFM,CAtDH,IAAIR,EAClB,YACA,yGACA,4CACA,4CACA,mEACA,iWAGc,IAAIA,EAClB,wBACA,kLACA,kDACA,kDACA,+EACA,2XAGqB,IAAIA,EACzB,oBACA,mEACA,oDACA,oDACA,iEACA,+YAGS,IAAIA,EACb,OACAS,IACA,8BACA,sCACA,4EACA,weAGa,IAAIT,EACjB,aACAU,IACA,uCACA,6CACA,iGACA,6PAGa,IAAIV,EACjB,YACAW,IACA,sCACA,4CACA,6FACA,kT,iBCjEWC,ECCG,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACXX,EAAkFW,EAAlFX,aAAcD,EAAoEY,EAApEZ,aAAcI,EAAsDQ,EAAtDR,iBAAkBF,EAAoCU,EAApCV,gBAAiBC,EAAmBS,EAAnBT,gBAEtE,OACE,6BAASU,UAAWC,IAAOC,WACzB,yBAAKC,IAAKf,EAAcgB,IAAG,UAAMjB,EAAN,cAC3B,4BAAKA,GACL,2BAAII,GACJ,2BAAG,uBAAGc,KAAOhB,GAAV,UAAH,MAA2C,uBAAGgB,KAAOf,GAAV,aCTlCgB,ECGM,WACnB,OACE,6BAASN,UAAWC,IAAOM,cACzB,wCACA,6BAASP,UAAWC,IAAOO,aACxBC,EAASC,KAAI,SAAAX,GAAO,OACnB,6BACE,kBAAC,EAAD,CAAWA,QAASA,WCVjBY,G,MCCE,WACf,OACE,oCACE,0DCJSC,ECIA,WACb,OACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,SAAO,EAACC,KAAM,IAAIC,GAAI,kBAChC,kBAAC,EAAD,CAAcC,KAAM,kBACpB,kBAAC,EAAD,CAAUC,SAAO,MCHNC,EAJH,WACV,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7eeb3801.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"projectsPage\":\"ProjectsPage_projectsPage__vEgkw\",\"projectsBox\":\"ProjectsPage_projectsBox__3GN3d\"};","module.exports = __webpack_public_path__ + \"static/media/vojo-pic.1ebf5dbd.png\";","module.exports = __webpack_public_path__ + \"static/media/to-do-list-pic.25db1fc8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/strange-eyes.f17b24f8.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardFront\":\"CardFront_cardFront__2xPcJ\"};","import VojoPic from '../assets/vojo-pic.png';\nimport ToDoListPic from '../assets/to-do-list-pic.jpg';\nimport SheaFacePic from '../assets/strange-eyes.jpg';\n\n\nclass Project {\n    constructor(projectTitle, projectImage, projectLiveLink, projectRepoLink, projectStrapline, projectDescription) {\n    this.projectTitle = projectTitle;\n    this.projectImage = projectImage;\n    this.projectLiveLink = projectLiveLink;\n    this.projectRepoLink = projectRepoLink;\n    this.projectStrapline = projectStrapline;\n    this.projectDescription = projectDescription;\n    };\n};\n\nconst santorini = new Project (\n    \"Santorini\",\n    \"https://static.independent.co.uk/s3fs-public/thumbnails/image/2019/08/07/14/oia-santorini.jpg?w968h681\",\n    \"https://jamesnowecki.github.io/santorini/\",\n    \"https://github.com/jamesnowecki/santorini\",\n    \"Vanilla JavaScript simulation of the Gordon Hamilton board game.\",\n    \"One of the mentors who pushed me to learn to code suggested simulating one of our favourite 2-player abstract board games as a useful exercise in learning OOP and functional programming. It provided a brilliant platform for validating the OOP and functional programming concepts we were learning on the course as I went along and my skills improved.\",\n);\n\nconst morseCode = new Project (\n    \"Morse-code translater\",\n    \"https://www.thoughtco.com/thmb/tzsqsnVPfCoo8RCsmGWGjp_tXog=/1500x1000/filters:no_upscale():max_bytes(150000):strip_icc()/international-morse-code1-5a78ad0b642dca0037cd818c.jpg\",\n    \"https://jamesnowecki.github.io/morse-code-test/\",\n    \"https://github.com/jamesnowecki/morse-code-test\",\n    \"Test to demonstrate basic understanding of JS array iterators and functions.\",\n    \"This was the first challenge we were given without much direction, just a problem to solve, after a week of JavaScript. The requirement was to translate a string of text to morse code, and to also be able to translate a string of morse back to text. As a personal challenge I also focussed on maintaining spacing in order to identify separate letters and words in morse code.\",\n);\n\nconst alleywayInvaders = new Project (\n    \"Alleyway Invaders\",\n    \"https://regmedia.co.uk/2013/03/04/invader.jpg?x=442&y=293&crop=1\",\n    \"https://jamesnowecki.github.io/alleyway-invaders/\",\n    \"https://github.com/jamesnowecki/alleyway-invaders\",\n    \"Example 5-hour timed tech-test to demonstrate JS OOP concepts.\",\n    \"This was our first timed tech test. We were required to take an OOP approach, creating different types of ships and apply damage at random. Once a ship's HP reached 0 it should not be hit again, and the death of the mothership should cause all the ships to die. It was specified this challenge needed to be completed within a single HTML file in under 150 lines of code. Styling was unimportant.\",\n);\n\nconst vojo = new Project (\n    \"Vojo\",\n    VojoPic,\n    \"https://vojo-bbe4f.web.app/\",\n    \"https://github.com/nology-tech/vojo\",\n    \"Group client project build with React, deployed and hosted with Firebase.\",\n    \"Our client project, completed over 4 weeks. An app to take input from the user in the form of questionnaires, associate these answers and a DNA swab kit with a back end algorithm via an API to generate personalised dietary and health advice. This advice is then dynamically displayed back to the user via the front end. I completed the setup of the CI/CD pipeline, a number of the components, the DNA kit integration functionality with the database and the routing and authentication.\",\n);\n\nconst toDoList = new Project (\n    \"To do list\",\n    ToDoListPic,\n    \"https://to-do-list.jamesnowecki.com/\",\n    \"https://github.com/jamesnowecki/To-do-list\",\n    \"Challenge to demonstrate CRUD integration with a database, authentication and private routing.\",\n    \"Small scale app challenge in React to demonstrate integration of firestore database, reading from and writing to the database, and displaying contents dynamically on the page. This has been extended to demonstrate authentication and private routing.\"\n);\n\nconst sheaFace = new Project (\n    \"Shea Face\",\n    SheaFacePic,\n    \"https://shea-face.jamesnowecki.com/\",\n    \"https://github.com/jamesnowecki/shea-face\",\n    \"Challenge to demonstrate obtaining information from API and handing functions in as props.\",\n    \"A small challenge to get us to implement hosting via Firebase, calling an API to obtain a random number, use that random number to generate a number of photo components on the page, each of which the user could input a different angle in, and have the eyes rotate to that angle upon click of the face.\"\n);\n\nconst projectArray = [santorini, morseCode, alleywayInvaders, vojo, toDoList, sheaFace];\n\nexport default projectArray;","import CardFront from \"./CardFront\";\n\nexport default CardFront;\n","import React from \"react\";\nimport styles from \"./CardFront.module.scss\";\n\nconst CardFront = ({project}) => {\n  const {projectImage, projectTitle, projectStrapline, projectLiveLink, projectRepoLink} = project;\n\n  return (\n    <section className={styles.cardFront}>\n      <img src={projectImage} alt= {`${projectTitle} picture`} />\n      <h3>{projectTitle}</h3>\n      <p>{projectStrapline}</p>\n      <p><a href= {projectLiveLink}>Launch</a> | <a href= {projectRepoLink}>GitHub</a></p>\n    </section>\n  );\n};\n\nexport default CardFront;\n","import ProjectsPage from \"./ProjectsPage\";\n\nexport default ProjectsPage;\n","import React from \"react\";\nimport styles from \"./ProjectsPage.module.scss\";\nimport projects from \"../../data/projects\";\nimport CardFront from \"../../components/CardFront\";\n\nconst ProjectsPage = () => {\n  return (\n    <section className={styles.projectsPage}>\n      <h2>Projects</h2>\n      <section className={styles.projectsBox}>\n        {projects.map(project => (\n          <div>\n            <CardFront project={project} />\n          </div>\n        ))}\n      </section>\n    </section>\n  );\n};\n\nexport default ProjectsPage;\n","import NotFound from \"./NotFound\";\n\nexport default NotFound;\n","import React from \"react\";\nimport styles from \"./NotFound.module.scss\";\n\nconst NotFound = () => {\n  return (\n    <>\n      <p>This page does not exist</p>\n    </>\n  );\n};\n\nexport default NotFound;\n","import Routes from \"./Routes\";\n\nexport default Routes;\n","import React from \"react\";\nimport styles from \"./Routes.module.scss\";\nimport {Router, Redirect} from \"@reach/router\";\nimport ProjectsPage from \"../ProjectsPage\";\nimport NotFound from \"../NotFound\";\n\nconst Routes = () => {\n  return (\n  <Router>\n    <Redirect noThrow from= \"/\" to= \"projects-page\" />\n    <ProjectsPage path= \"projects-page\" />\n    <NotFound default/>\n  </Router>\n  );\n};\n\nexport default Routes;\n","import React from \"react\";\nimport styles from \"./App.module.scss\";\nimport Router from \"./containers/Routes\";\n\nconst App = () => {\n  return <Router />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}